#!/usr/bin/env python

from sklearn.feature_selection import chi2, SelectKBest
import os
import sys
import glob
from cloudpickle import dumps
import dask.dataframe as ddf
import time
import argparse

from sklearnex import patch_sklearn
patch_sklearn()

prefix = "/opt/ml"

labels = ['adware', 'flooder', 'ransomware', 'dropper', 'spyware', 'packed',
          'crypto_miner', 'file_infector', 'installer', 'worm', 'downloader']
features = [f"feature_{x}" for x in range(2381)]


def log_container_info(prefix):
    print('------------------- environment variables -------------------')
    print(os.environ)
    print('------------------- environment variables -------------------')
    print('------------------- arguments -------------------')
    print(sys.argv)
    print('------------------- arguments -------------------')
    print('------------------- filesystem -------------------')
    for filename in glob.iglob(prefix + '**/**', recursive=True):
        print(filename)
    print('------------------- filesystem -------------------')


def process(args):
    y = ddf.read_parquet(f"{prefix}/processing/data/{args.name}",
                         compression="snappy", columns=[args.label])

    chunked_features = []
    for i in range(0, len(features), args.chunk_size):
        chunked_features.append(features[i:i+args.chunk_size])

    print(f"kbest for {args.label}")
    scores = []
    total_time = 0
    for i, chunk in enumerate(chunked_features):
        start = time.time()

        X = ddf.read_parquet(
            f"{prefix}/processing/data/{args.name}", compression="snappy", columns=chunk)
        selector = SelectKBest(chi2, k=args.k)
        selector.fit(X, y)
        scores += zip(chunk, selector.scores_)

        stop = time.time()
        total_time += stop-start
        print(f"i = {i+1:03} tpi = {total_time/(i+1):.2f}")

    print(f"save scores for {args.label}")
    with open(f"{prefix}/processing/output/scores-{args.label}.pkl", "wb") as f:
        f.write(dumps(scores))

    print('Finish the processing.')


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-prefix", type=str, default="/opt/ml")
    parser.add_argument("-k", action='store', default='all')
    parser.add_argument("-chunk-size", type=int, default=48)
    parser.add_argument("-name", type=str, default='train')
    parser.add_argument("-label", type=str, choices=labels)
    args = parser.parse_args()

    log_container_info(args.prefix)
    k = args.k.isdecimal() and int(args.k) or args.k
    process(args)

    sys.exit(0)
